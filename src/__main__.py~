#!/usr/bin/env python
"""
Program Name: Cross-correlation Plotting Program (I'll find a fancy name later!)
Author      : Mustafa TEKPINAR
Email       : tekpinar@buffalo.edu
Copyright   : Mustafa Tekpinar - 2019
License     : MIT License

Purpose     : This is a small program to automatize plotting of normalized 
dynamical cross-correlations obtained from molecular dynamics simulations or 
elastic network models. This script can be useful if you have multiple 
chains in a structure and you want to see intra-chain and inter-chain 
correlations more clearly. I just didn't like the way current programs are 
doing it and I wrote something for myself. I hope it may help the others also!
"""

from correlationPlus import *

if __name__ == "__main__":
    #TODO:
    # There are a bunch of things one can do with this script:
    # 1-Plot nDCC maps or normalized linear mutual information maps!
    # 2-Project (high) correlations onto PDB structure.
    #   a) as a pymol script output
    #   b) as a VMD script output
    # 3-Project secondary structures on x and y axes.
    print("\n\n|------------------------------Correlation Plus------------------------------|")
    print("|                                                                            |")
    print("|       A small utility program to plot protein correlation maps.            |")
    print("|                 Copyright (c) 2019 Mustafa Tekpinar                        |")
    print("|                       Email: tekpinar@buffalo.edu                          |")
    print("|                          Licence: MIT License                              |")
    print("|--------------------------------------------------------------------------- |\n\n")

    (inp_file, out_file, sel_type, pdb_file) = handle_arguments()
    print("\n@> Input file   :", inp_file)
    print("@> PDB file     :", pdb_file)
    print("@> Data type    :", sel_type)    
    print("@> Output       :", out_file)

    ##########################################################################
    #Read PDB file 
    #TODO: This is the only place where I use Prody.
    #Maybe, I can replace it with a library that only parses 
    #PDB files. Prody does a lot more!
    selectedAtoms = parsePDB(pdb_file, subset='ca')

    ##########################################################################
    #Read data file and assign to a numpy array
    if(sel_type=="dcc"):
        ccMatrix=np.loadtxt(inp_file, dtype=float)
    elif(sel_type=="lmi"):
        ccMatrix = convertLMIdata2Matrix(inp_file, writeAllOutput=False)
    else:
        print("Unknown matrix format!\n")
        sys.exit(-1)
    
    #Check the data type in the matrix.
    minCorrelationValue = np.min(ccMatrix)

    maxCorrelationValue = np.max(ccMatrix)

    if (minCorrelationValue<0.0):
        #Assume that it is an nDCC file
        minColorBarLimit = -1.0
    else:
        #Assume that it is an LMI file
        minColorBarLimit = 0.0

    if(maxCorrelationValue>1.0):
        print("This correlation map is not normalized!")
        sys.exit(-1)
    ##########################################################################
    #Call overall correlation calculation
    maxColorBarLimit = 1.0
    overallCorrelationMap(ccMatrix, minColorBarLimit, maxColorBarLimit,\
                                    out_file, " ", selectedAtoms)

    if (minCorrelationValue<0.0):
        distanceDistribution(ccMatrix, out_file, "Abs(nDCC)", \
            selectedAtoms, absoluteValues=True , writeAllOutput=False)
        
        distanceDistribution(ccMatrix, out_file, "nDCC", selectedAtoms, \
                            absoluteValues=False , writeAllOutput=True)
    else:
        print("Je suis ici!")
        distanceDistribution(ccMatrix, out_file, "LMI", \
            selectedAtoms, absoluteValues=True , writeAllOutput=True)
    ##########################################################################
    #Check number of chains. If there are multiple chains, plot inter and 
    #intra chain correlations
    chains = Counter(selectedAtoms.getChids()).keys()
    if(len(chains)>1):
        intraChainCorrelationMaps(ccMatrix, minColorBarLimit, maxColorBarLimit,\
                                        out_file, " ", selectedAtoms)
        interChainCorrelationMaps(ccMatrix, minColorBarLimit, maxColorBarLimit,\
                                        out_file, " ", selectedAtoms)

    print("\n@> Program finished successfully!\n")
